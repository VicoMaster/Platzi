> ¿Cómo nace Javascript?
    Nace con la necesidad de generar dinamismo en las páginas web y que a su vez los usuarios y las empresas pudieran interactuar unos con otros.
> ¿Qué es Javascript?
    Es un lenguaje interpretado, orientado a objetos, débilmente tipado y dinámico.
> Débilmente tipado
    Se pueden hacer operaciones entre tipos distintos de datos (enteros con strings, booleanos con enteros, etc). Ejemplo:
    4 + "7"; // 47
    4 * "7"; // 28
    2 + true; // 3
    false - 3; // -3
> Dinámico
    Corre directamente en la etapa de Runetime sin una etapa de compilación previa. Esto permite probar nuestro código inmediatamente; pero también es lo que hace que los errores se muestren hasta que se ejecuta el programa.
> ¿Realmente es Javascript un lenguaje interpretado?
    Si, y la razón es que le navegador lee linea por linea nuestro código el cuál le indica lo que tiene que hacer, sin la necesidad de compilar. Todo esto es controlado por el motor de Javascript V8 del navegador
>  Javascript es Basckwards Compatible
    Todas las funciones nuevas que salen de Javascript no dañarán el trabajo ya hecho, pero no se podrá utilizar en nuestro entorno de trabajo inmediatamente. Para solucionar esto está Babel que permite utilizar las nuevas características del lenguaje pero lo transforma a una versión que el navegador pueda entender.

>> VALORES

> PRIMITIVOS: son los valores básicos que se utilizan para poder generar códigos.

> Número: data sólo de tipo numérico, ejem: 1 2 3 4, etc.
> Strig: texto, se utiliza entre comillas dobles. “Haciendo esto”, “Diego Hernández”
> Boolean o Booleano: son valores creados por George Boolean dentro de lenguajes de programación para poder validar cosas y/o desiciones, por ello se utilizan: true (1) o false (0).
> Empty values: null o undefined, se les conoce como valores “placeholders”, pero son valores reservados para un tipo de valor que queda faltante en memoria. También pueden ser tomados    como valores de errores.
> NO PRIMITIVOS O VALORES TIPO OBJETOS:
    Array: se genera ocupando corchetes, los cuales dentro ocupan valores primitivos, ejem: [1,2,3] convirtiéndolos en valores tipo objeto.
    Valor tipo Objeto: se generan con corchetes, los cuales dentro ocupan una data que se transforma en objeto, ejem de sintaxis: { nombre: “Diego”}.

> Scope: Es el alcance que tienen las variables.
    >> global > local(funcion) > block > code

> Hoisting: CUando las variables y las funciones se declaran antes de que se proceso cualquier tipo de código. El Hoisting solo pasa con versiones de Javascript antiguo, con EmnaScript 5 para abajo. Solo sirve con las palabras var y function. En versiones posteriores se manejan las variables CONST y LET.

> Coerción: es la forma en la que podemos cambiar un tipo de valor a otro, existen dos tipos de coerción:
    >> Coerción implícita = es cuando el lenguaje nos ayuda a cambiar el tipo de valor.
    >> Coerción explicita = es cuando obligamos a que cambie el tipo de valor.

> ParseInt vs Number
    ParseInt: Analiza la cadena desde el primer dígito, hasta que encuentre algo que no sea dígito y devuelve lo que haya analizado.
    Ejemplo:
    parseInt(“123hui”) //123
    Number: Busca convertir toda la cadena en un número, por lo que al encontrarse con un elemento que no sea diginto nos dara como resultado NAN.
    Ejemplo:
    Number(“123hui”) //NaN

> Valores: Truthy y Falsy
    Boolean(0); //false
    Boolean(null); //false
    Boolean(NaN); //false
    Boolean(undefined); //false
    Boolean(false); //false
    Boolean(""); //false

    Boolean(1); //true para 1 o cualquier número diferente de cero (0)
    Boolean("a"); //true para cualquier caracter o espacio en blanco en el string
    Boolean([]); //true aunque el array esté vacío
    Boolean({}); //true aunque el objeto esté vacío
    Boolean(function(){}); //Cualquier función es verdadera también

> Operadores:
    >> Operadores binarios:
        3 + 2 //Suma
        50 - 10 // Resta
        10 * 20 //Multiplicación
        20 / 2 //División
        "Diego " + "De Granda" //concatenación de strings
    >> Operadores unitarios:
        !false //negación de la negación = true

    >> Operadores de asignación:
        var a = 1; //Asignamos un valor a la variable

    >> Operadores para comparar:
        3 == "3"; //Compara los valores y devuelve "true" en este caso
        3 === "3"; //Compara y valida los tipos y valores. Devuelve "falso" en este caso
        5 < 3 //Compara y valida si el 5 es menor a 3
        5 > 3 //Compara y valida si el 5 es mayor a 3
        5 <= 6 //Compara y valida si el 5 es menor o igual al 6
        5 >= 6 //Compara y valida si el 5 es mayor o igual al 6
        a && b //Valida si ambas variables son verdaderas para que se cumpla la condición
        a || b //Aquí se cumple la condición si alguna de las dos variables es verdadera
        var edad = 40
        edad++ //Incrementa el valor en 1
        edad += 2 //Incrementa el valor por 2

> Arrays: pueden contener otros arrays, solo pueden contener datos del mismo tipo.

> Bucles: pueden ejecutar un bloque de código varias veces. JavaScript admite diferentes tipos de bucles:
    >> for - recorre un bloque de código varias veces
    >> for/in - recorre las propiedades de un objeto
    >> for/of - recorre los valores de un objeto iterable
    >> while - recorre un bloque de código mientras se cumple una condición específica
    >> do/while - también recorre un bloque de código mientras se cumple una condición específica

> Diferencias entre LET vs VAR:
    let permite declarar variables limitando su alcance (scope) al bloque, declaración, o expresión donde se está usando. Lo anterior diferencia la expresión let de la palabra reservada var , la cual define una variable global o local en una función sin importar el ámbito del bloque.
    Cuando usamos let dentro de un bloque, podemos limitar el alcance de la variable a dicho bloque. Notemos la diferencia a con var, cuyo alcance reside dentro de la función donde ha sido declarada la variable.


> Prototipo:
    El prototipo es un objeto más de JS , a partir de que lo modifiquemos, éste va a quedar modificado.
    Es de mucha importancia donde colocamos las funciones que va a tener el prototipo . Estos se deben de colocar juntos, ya que con ellos se va creando el prototipo del objeto, y deseamos que tenga juntas todas sus funciones.
    Por ello definimos los prototipos arriba, y los utilizamos a lo largo del código.
    NOTA: Cuando tenemos un error en JS, éste no se sigue ejecutando, se corta ahí la ejecución del código.


> Convenciones
    >> Para String comillas simples.
    >> comilla invertida para interpolar variables para concatenar= alt + 96


> Callbacks: Es una función que se ejecutara en algun futuro, pero no sabemos cuando. Cuando termine el Request se va a llamar. Si el request no termina nunca se ejecutara. Se llaman funciones en serie, una sincronia en la respuesta.

> Promesas:
Tenemos que pensar las promesas como valores que aún no conocemos. Es la promesa de que ahí va a haber un valor cuando una acción asíncrona suceda y se devuelva.
Las promesas tienen 3 estados y son como cualquier otro objeto de javascript:
El primero de los estados es ‘pending’. Es el estado cuando las creamos.
Si se resuelve exitosamente pasa al estado ‘fulfilled’.
Si ocurre algún error y no se resuelve pasa al estado de ‘rejected’.
Las promesas pueden no ser asíncronas también.
Para obtener el valor de la resolución de la promesa llamamos a la función _.then(val =>) _a la que le vamos a pasar como parámetro otra función en la que el primer parámetro será el valor que esperábamos.
Si sucede algún error agregamos el método .catch(err=>) al que se le asigna una función también como parámetro que va a recibir el error.

> Async-await: lo último en asincronismo
Async-await es la manera más sencilla y clara de realizar tareas asíncronas. Se parece mucho a la forma de escribir código hace unos años, de manera secuencial, desde arriba hacia abajo.


> Memoización:
Es una técnica de programación que nos permite ahorrar cómputo o procesamiento en JavaScript, al ir almacenando el resultado invariable de una función para que no sea necesario volver a ejecutar todas las instrucciones de nuevo, cuando se vuelva a llamar con los mismos parámetros. Es similar a usar memoria cache.

> Closures: Clausulas o funciones de cierres son un patron muy usado en JS, esta dentro de lo que se conoce en las Good parts. Es una función que encapsula una serie de variables y definiciones locales que unicamente seran accesibles si son devueltas con el operador return. Permite manejar estructuras de datos privadas, que no son accesibles.

> Generators: Son una alternativa poderosa que permiten definir un algoritmo iterativo al escribir una sola funcion que puede mantener su propio estado.


> ECUACIONES MATEMATICAS:
    >> Perimetro de un cuadrado:
    El perímetro del cuadro es la suma de la longitud de cada lado del cuadrado: L* 4 = cm

    >> Area del cuadrado (2 dimensiones)
    L * L = cm2

    >> Perimetro de un triangulo:
    L + L + L = cm

    >> Área del triangulo:
    (B * A) / 2  = cm2

    >> Perimetro del circulo (circunferencia):
    Diametro * PI

    >> Área del círculo:
    Radio2 * PI  = cm2
    
    >> Calcular altura de un triangulo isosceles
    - saber sus 2 lados iguales
    - saber su lado diferente
    - dividir el triangulo en 2 partes iguales paa obtener 2 triangulos rectangulos
    - Utilizar el teorema de pitagoras para calcular la altura del triangulo rectangulo
    - solo se haran las ecuaciones con los datos de 1 triangulo rectangulo
    - el lado mayor es la hipotenusa (c) y la base (b).. Altura = (a)
    - para encontrar el cateto a = sqrt(c^2-b^2)
    -- para comprobar el teorema de pitagoras aplicar la siguiente formula c^2 = a^2 + b^2 (deben quedar datos iguales ejmplo: 25 = 25)

    >> Calcular descuento de un precio: [P * (100 - D)] / 100

    >> Analisis de datos [estadistica]:
    * Media o promedio aritmético: Consiste en sumar cada numero y dividirlo por la cantidad de numero que hay.
        (20 + 30 + 40) = 90 / 3 = 30
        Este no es tan optimo ya que si ingresa algo a lo que se le llama “dato atípico” los resultados no serian muy acertados.
        * Mediana: Este consiste en tener un numero de elementos numéricos, lo primero que debes de hacer es ordenarlos en forma ascendente:
        Si el numero de datos que hay en el “arreglo” es impar escogemos el numero de la mitad: Si fueran 15 posiciones escogemos la posición 8
        Si el numero de datos que hay en el “arreglo” es par escogemos el valor de las dos posiciones del centro y las dividimos en dos: Si fuera 16 escogemos la posición 8 y 9 y la dividimos entre 2
        Este proceso es mucho mas optimo que la media ya que los datos atípicos no afectaran demasiado el valor final.
        * Moda: Este es el dato que mas se repite en un conjunto de datos si tenemos el siguiente arreglo [10,9,8,10,8,10,8,7,9] y vemos que dos números se repiten la misma cantidad de veces, simplemente se ponen los dos [8,10].
        Este tipo de proceso es muy funcional cuando no solo queremos hablar de tipos de datos numéricos, tambien pueden ser cadenas de texto y demás.