------- GLOSARIO CSS - INFORMACIÓN GENERAL 

> DOM: Document Object Model. Es una transformación del código HTML escrito por nosotros a objetos entendibles para el navegador.
> CSSOM: así como el DOM para el HTML, el CSSOM es una representación de objetos de nuestros estilos en CSS.
> RENDER TREE: es la unión entre el DOM y el CSSOM para renderizar todo el codigo de nuestra pagina web.

------- Pasos que sigue el navegador para construir las páginas web: 
> Procesa el HTML para construir el DOM.
> Procesa el CSS para construir el CSSOM.
> El DOM se une con el CSSOM para crear el Render Tree.
> Se aplican los estilos CSS en el Render Tree.
> Se "pintan" los nodos en la pantalla para que los usuarios vean el contenido de la página web.


------- Funciones de las propiedades CSS más usadas
> width: Define el ancho de un elemento. Por ejemplo: width: 20px;.
> height: Define el alto de un elemento. Por ejemplo: height: 20px;.
> background: Puede definir el color de fondo o la url de fondo de un elemento. Por ejemplo: background: url(';puppy.png';);
> color: Define el color de nuestros textos. Estos colores los podemos escribir de 3 formas en CSS:
    * Con los nombres de los colores. Por ejemplo: black, red, green.
    * Sistema hexadecimal: Donde blanco se define como #FFFFFF y negro como #000000.
    * RGB: Donde la R significa Red, G significa Green y B significa Blue; por lo que escribimos rgb(red, green, blue) y cada uno de ellos es un valor de 0 a 255 que describe la intensidad de ese color. a estos valores se les puede agregar una opacidad (transparencia) que va de 0 a 1, por ejemplo: rgba(0, 255, 0, 0.5) lo que quiere decir que el color verde lo queremos con una transparencia del 50%.
> border: Define el tamaño, estilo y color del borde de un elemento. Por ejemplo: border: 2px solid yellow;
> border-radius: Define qué tan redondeado quiero mi elemento. Por ejemplo: border-radius: 20px;
> margin: Define la margen de un elemento. Por ejemplo: margin: 2px (lo que quiere decir que mi elemento tendrá márgenes en todos sus lados de 2px). Si quiero que mi elemento tenga margen superior de 2px, margen inferior de 4px, margen derecha de 3px y margen izquierda de 5px, lo escribiría de la siguiente forma: margin: 2px 3px 4px 5px. El primer valor es la margen superior y siempre va en sentido de las manecillas del reloj.
Si solo quiero que mi elemento tenga una margen a la derecha de 10px, escribiría margin-right: 10px;. Y para los demás valores sería margin-top: 10px; para la margen superior, margin-bottom: 10px; para la margen inferior y margin-left: 10px; para la margen izquierda.

> padding: Define la distancia del borde de un elemento hasta su contenido. Por ejemplo: padding: 2px (lo que quiere decir que mi elemento tendrá un “margen interno” en todos sus lados de 2px).
> font-size: Define el tamaño de la fuente. Por ejemplo: font-size: 20px;.
> font-family: Define la familia tipográfica de la fuente. Por ejemplo: font-family: 'Roboto', sans-serif;
> fuentes :fonts.google.com.
> opacity: Determina la transparencia del elemento. Tiene valores entre 0 y 1, que pueden verse como un porcentaje. Por ejemplo, si quiero que mi elemento se vea con una transparencia del 50%, escribiría: opacity: 0.5;.

> outline: Un término algo desconocido es el esquema de los elementos HTML. Un esquema es una línea (por defecto, de color azúl) que se dibuja alrededor de los elementos que hace que “se destaquen”. Lo anterior sucede mucho en elementos como los <input>s y los <button>s. Si no queremos ver esa línea, lo que hacemos es outline: none;. Aunque también podemos decirle que tenga determinado estilo, color, tamaño, entre otras. Por ejemplo:
outline-style: solid;
outline-color: red;
outline-width: 5px;

> box-sizing: Cuando trabajamos con paddings, veremos que el tamaño de nuestro elemento crece. Sin embargo, si yo no quiero que el padding afecte los px originales, le agrego la propiedad box-sizing para que el tamaño total del elemento incluya el padding también y no se vea afectado por él.
box-sizing: border-box;
width: 100%;
border: solid #5B6DCD 10px;
padding: 5px;

> transition: Las transiciones CSS le permiten cambiar los valores de las propiedades sin problemas durante una duración determinada. Debemos tener presente que una transición NO es una animación. Una transición va de un punto A a un punto B sin interrupciones o saltos en medio.

> animation: Esta propiedad permite que animemos nuestros elementos.

